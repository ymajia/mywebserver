#ifndef THREADPOOL98_H
#define THREADPOOL98_H

#include <deque>
#include <string>
#include <pthread.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <stdio.h>

class Task
{
public:
    Task(void *arg = NULL, const std::string taskName = "")
            : arg_(arg)
            , taskName_(taskName)
    {}
    
    virtual ~Task() {}

    void setArg(void *arg)
    {
        arg_ = arg;
    }

    virtual int run() = 0;

protected:
    void *arg_;
    std::string taskName_;
};

class ThreadPool
{
public:
    ThreadPool(int threadNum = 10);
    ~ThreadPool();

    size_t addTask(Task *task);
    void stop();
    int size();
    Task *take();

private:
    int createThreads();
    static void *threadFunc(void *threadData);

    ThreadPool &operator=(const ThreadPool &);
    ThreadPool(const ThreadPool &);

private:
    volatile bool isRunning_;
    int threadsNum_;
    pthread_t *threads_;            // 线程数组

    std::deque<Task *> taskQueue_;  // 任务队列
    pthread_mutex_t mutex_;         // 操作队列时加锁
    pthread_cond_t condition_;
};

ThreadPool::ThreadPool(int threadNum)
{
    isRunning_ = true;
    threadsNum_ = threadNum;
    createThreads();
}

ThreadPool::~ThreadPool()
{
    stop();
    for (std::deque<Task *>::iterator it = taskQueue_.begin();
            it != taskQueue_.end(); ++it)
    {
        delete *it;
    }
    taskQueue_.clear();
}

int ThreadPool::createThreads()
{
    pthread_mutex_init(&mutex_, NULL);
    pthread_cond_init(&condition_, NULL);
    threads_ = (pthread_t *)malloc(sizeof(pthread_t) * threadsNum_);
    for (int i = 0; i < threadsNum_; i++)
    {
        pthread_create(&threads_[i], NULL, threadFunc, this);
    }
    return 0;
}

size_t ThreadPool::addTask(Task *task)
{
    pthread_mutex_lock(&mutex_);
    taskQueue_.push_back(task);
    int size = taskQueue_.size();
    pthread_mutex_unlock(&mutex_);
    pthread_cond_signal(&condition_);
    return size;
}

void ThreadPool::stop()
{
    if (!isRunning_) return;

    isRunning_ = false;
    pthread_cond_broadcast(&condition_);    // 唤醒所有阻塞的线程

    for (int i = 0; i < threadsNum_; i++)
    {
        pthread_join(threads_[i], NULL);
    }

    free(threads_);
    threads_ = NULL;

    pthread_mutex_destroy(&mutex_);
    pthread_cond_destroy(&condition_);
}

int ThreadPool::size()
{
    pthread_mutex_lock(&mutex_);
    size_t size = taskQueue_.size();
    pthread_mutex_unlock(&mutex_);
    return size;
}

Task *ThreadPool::take()
{
    Task *task = NULL;
    while (!task)
    {
        pthread_mutex_lock(&mutex_);
        while (taskQueue_.empty() && isRunning_)
        {
            pthread_cond_wait(&condition_, &mutex_);
        }

        if (!isRunning_)
        {
            pthread_mutex_unlock(&mutex_);
            break;
        }
        else if (taskQueue_.empty())
        {
            pthread_mutex_unlock(&mutex_);
            continue;
        }

        assert(!taskQueue_.empty());
        task = taskQueue_.front();
        taskQueue_.pop_front();
        pthread_mutex_unlock(&mutex_);
    }
    return task;
}

void *ThreadPool::threadFunc(void *arg)
{
    pthread_t tid = pthread_self();
    ThreadPool *pool = static_cast<ThreadPool *>(arg);
    while (pool->isRunning_)
    {
        Task *task = pool->take();
        if (!task)
        {
            printf("thread %lu will exit!\n", tid);
            break;
        }
        assert(task);
        task->run();
    }
    return 0;
}

#endif